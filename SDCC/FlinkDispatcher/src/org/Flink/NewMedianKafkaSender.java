package org.Flink;

import Model.GPSJsonReader;
import Model.IoTData;
import Model.SemaphoreJsonReader;
import algorithms.PSquared;
import algorithms.Welford;
import all.model.SemaphoreSensor;
import com.google.gson.Gson;
import main.java.FlinkResult;
import main.java.Message;
import main.java.system.Printer;
import org.apache.flink.api.common.functions.AggregateFunction;
import org.apache.flink.api.common.functions.FlatMapFunction;
import org.apache.flink.api.common.serialization.SerializationSchema;
import org.apache.flink.api.java.tuple.*;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.datastream.DataStreamSource;
import org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.api.functions.windowing.WindowFunction;
import org.apache.flink.streaming.api.windowing.time.Time;
import org.apache.flink.streaming.api.windowing.windows.TimeWindow;
import org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer011;
import org.apache.flink.streaming.connectors.kafka.FlinkKafkaProducer011;
import org.apache.flink.streaming.util.serialization.SimpleStringSchema;
import org.apache.flink.util.Collector;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Properties;

public class NewMedianKafkaSender {


    private static String INPUT_KAFKA_TOPIC = null;
    private static int TIME_WINDOW = 0;
    private static final String topicname = "monitorer";
    private static final Logger log = LoggerFactory.getLogger(org.Flink.WindowTrafficData.class);
    private static int count = 0;



    public void calculateMedian() throws Exception {

        INPUT_KAFKA_TOPIC = "semaphoresensor";
        TIME_WINDOW = 10;
        Properties properties = new Properties();
        properties.setProperty("bootstrap.servers", "localhost:9092");
        properties.setProperty("zookeeper.connect", "localhost:2181");
        properties.setProperty("group.id", INPUT_KAFKA_TOPIC);
        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();
        DataStreamSource<String> stream = env.addSource(new FlinkKafkaConsumer011(INPUT_KAFKA_TOPIC, new SimpleStringSchema(), properties));

        System.out.println("got sources");
        // DataStream<Tuple11<String, String, String, String, String, Int, Double, Double ,Boolean,Boolean,Boolean>> streamTuples = stream.flatMap(new SemaphoreJson2Tuple());
        DataStream<Tuple2<String, Double>> streamTuples = stream.flatMap(new SemaphoreJson2Tuple());

        streamTuples.print();
        DataStream<Tuple2<String, Double>> averageSpeedStream = streamTuples
                .keyBy(new int[]{0})
                .timeWindow(Time.seconds((long)TIME_WINDOW))
                .aggregate((AggregateFunction<Tuple2<String, Double>, Tuple2 <String, PSquared>, Tuple2<String, Double>>) new MedianAggregate());


        //write to another kafka topic
        averageSpeedStream.addSink(new FlinkKafkaProducer011<>("localhost:9092", topicname, (SerializationSchema<Tuple2<String, Double>>) stringDoubleTuple2 -> {
            Gson gson = new Gson();
            String key = stringDoubleTuple2.f0;
            double value = stringDoubleTuple2.f1;
            FlinkResult flinkResult = new FlinkResult(key, value, count);
            count = 0;
            Message m = new Message("flinkDispatcher", 701);
            m.setFlinkResult(flinkResult);
            String result = gson.toJson(m);
            return result.getBytes();
        }));

        averageSpeedStream.print();
        env.execute("Window Traffic Data");

    }





/*
    Following Class executes flink for tuples generated by semaphores' sensor.
 */

    private static class MedianAggregate implements AggregateFunction<Tuple2<String, Double>, Tuple2<String, PSquared>, Tuple2<String, Double>> {

        @Override
        public Tuple2<String, PSquared> createAccumulator() {
            return new Tuple2<>("porcamadona", new PSquared(0.5f));
        }

        @Override
        public Tuple2<String,PSquared> add(Tuple2<String, Double> value, Tuple2<String,PSquared> accumulator) {
            accumulator.f1.accept( value.f1.floatValue());
            return new Tuple2<>(value.f0, accumulator.f1);
        }

        @Override
        public Tuple2<String, Double> getResult(Tuple2<String,PSquared> accumulator) {
            System.out.println("Median is: ");
            return new Tuple2<>(accumulator.f0 + "mediana", (double) accumulator.f1.getPValue());        }

        @Override
        public Tuple2<String,PSquared> merge(Tuple2<String,PSquared> a, Tuple2<String,PSquared> b) {
            return null;
        }
    }


    public static class SemaphoreJson2Tuple implements FlatMapFunction<String, Tuple2<String,Double>> {
        public SemaphoreJson2Tuple() {
        }

        @Override
        public void flatMap(String jsonString, Collector<Tuple2<String, Double>> out) throws Exception {
            ArrayList<SemaphoreSensor> recs = SemaphoreJsonReader.getSemaphoreDatas(jsonString);
            Iterator irecs = recs.iterator();

            while(irecs.hasNext()) {
                SemaphoreSensor record = (SemaphoreSensor) irecs.next();
                Tuple2 tp2 = new Tuple2();
                tp2.setField(record.getSemaphoreID(), 0);
                tp2.setField(record.getMeanSpeed(), 1 );

                out.collect(tp2);
            }

        }
    }}
